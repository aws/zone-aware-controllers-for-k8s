// File generated by the kubebuilder framework:
// https://github.com/kubernetes-sigs/kubebuilder

/*
Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"context"
	"flag"
	"os"
	"strings"

	// Import all Kubernetes client auth plugins (e.g. Azure, GCP, OIDC, etc.)
	// to ensure that exec-entrypoint and run can make use of them.
	_ "k8s.io/client-go/plugin/pkg/client/auth"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	"k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
	"sigs.k8s.io/controller-runtime/pkg/webhook"

	opsv1 "github.com/aws/zone-aware-controllers-for-k8s/api/v1"
	"github.com/aws/zone-aware-controllers-for-k8s/controllers"
	"github.com/aws/zone-aware-controllers-for-k8s/pkg/podzone"
	"github.com/aws/zone-aware-controllers-for-k8s/pkg/utils"
	web "github.com/aws/zone-aware-controllers-for-k8s/webhooks"
	//+kubebuilder:scaffold:imports
)

const (
	CONTROLLERS_ENV               = "CONTROLLERS"
	CONTROLLERS_ENV_DEFAULT_VALUE = "zdb,zau"
	CONTROLLERS_ENV_ZAU_VALUE     = "zau"
	CONTROLLERS_ENV_ZDB_VALUE     = "zdb"
)

var (
	scheme   = runtime.NewScheme()
	setupLog = ctrl.Log.WithName("setup")
)

func init() {
	utilruntime.Must(clientgoscheme.AddToScheme(scheme))

	utilruntime.Must(opsv1.AddToScheme(scheme))
	//+kubebuilder:scaffold:scheme
}

func main() {
	var metricsAddr string
	var enableLeaderElection bool
	var probeAddr string
	flag.StringVar(&metricsAddr, "metrics-bind-address", ":8080", "The address the metric endpoint binds to.")
	flag.StringVar(&probeAddr, "health-probe-bind-address", ":8081", "The address the probe endpoint binds to.")
	flag.BoolVar(&enableLeaderElection, "leader-elect", false,
		"Enable leader election for controller manager. "+
			"Enabling this will ensure there is only one active controller manager.")
	opts := zap.Options{
		Development: true,
	}
	opts.BindFlags(flag.CommandLine)
	flag.Parse()

	ctrl.SetLogger(zap.New(zap.UseFlagOptions(&opts)))

	mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme:                 scheme,
		MetricsBindAddress:     metricsAddr,
		Port:                   9443,
		HealthProbeBindAddress: probeAddr,
		LeaderElection:         enableLeaderElection,
		LeaderElectionID:       "cebbe7b1.amp.aws",
	})
	if err != nil {
		setupLog.Error(err, "unable to start manager")
		os.Exit(1)
	}

	startZdb, startZau := controllersToStart()

	if !startZdb && !startZau {
		setupLog.Error(err, "no valid controller (zau and/or zdb) specified to start")
		os.Exit(1)
	}

	podZoneHelper := podzone.Helper{
		Client: mgr.GetClient(),
		Logger: ctrl.Log.WithName("pod-zone-helper"),
		Cache:  podzone.NewCache(),
	}

	if startZdb {
		if err = (&controllers.ZoneDisruptionBudgetReconciler{
			Client:        mgr.GetClient(),
			Scheme:        mgr.GetScheme(),
			Logger:        ctrl.Log.WithName("zdb-controller"),
			PodZoneHelper: &podZoneHelper,
		}).SetupWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ZoneDisruptionBudget")
			os.Exit(1)
		}
	}

	if startZau {
		region := os.Getenv("AWS_REGION") // AWS_REGION env is set by EKS
		cfg, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(region))
		if err != nil {
			setupLog.Error(err, "unable to load AWS config")
			os.Exit(1)
		}
		cwClient := cloudwatch.NewFromConfig(cfg)
		cwAlarmStateProvider := &utils.CloudWatchAlarmStateProvider{Client: cwClient}

		if err = (&controllers.ZoneAwareUpdateReconciler{
			Client:             mgr.GetClient(),
			Scheme:             mgr.GetScheme(),
			Logger:             ctrl.Log.WithName("zau-controller"),
			PodZoneHelper:      &podZoneHelper,
			AlarmStateProvider: cwAlarmStateProvider,
		}).SetupWithManager(mgr); err != nil {
			setupLog.Error(err, "unable to create controller", "controller", "ZoneAwareUpdate")
			os.Exit(1)
		}
	}
	//+kubebuilder:scaffold:builder

	// Setup core types webhooks
	if startZdb {
		hookServer := mgr.GetWebhookServer()
		setupLog.Info("registering webhooks to the webhook server")
		hookServer.Register("/pod-eviction-v1", &webhook.Admission{Handler: &web.PodEvictionHandler{
			Client: mgr.GetClient(),
			Logger: ctrl.Log.WithName("eviction-webhook"),
		}})
	}

	if err := mgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up health check")
		os.Exit(1)
	}
	if err := mgr.AddReadyzCheck("readyz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up ready check")
		os.Exit(1)
	}

	setupLog.Info("starting manager")
	if err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {
		setupLog.Error(err, "problem running manager")
		os.Exit(1)
	}
}

func controllersToStart() (zdb bool, zau bool) {
	controllersEnv, hasEnv := os.LookupEnv(CONTROLLERS_ENV)
	if !hasEnv {
		controllersEnv = CONTROLLERS_ENV_DEFAULT_VALUE
	}

	zdb = strings.Contains(controllersEnv, CONTROLLERS_ENV_ZDB_VALUE)
	zau = strings.Contains(controllersEnv, CONTROLLERS_ENV_ZAU_VALUE)
	return zdb, zau
}
